include "BasePlugin.include"

# Upgrade DataMode record
record(mbbo, "$(P)DataMode")
{
    field(FLNK, "$(P)DataModeCalc")
}
record(calcout, "$(P)DataModeCalc")
{
    field(INPA, "$(P)DataMode NPP")
    field(CALC, "A=0") # Select between pass-thru and flatten
    field(OUT,  "$(P)FfMode PP")
}

record(bo, "$(P)Enable")
{
    info(archive, "Monitor, 00:10:00")
    info(autosaveFields, "VAL")
    field(ZSV,  "MAJOR")
    field(PINI, "YES")
    field(FLNK, "$(P)StatusCalc")
}
record(calc, "$(P)StatusCalc")
{
    field(INPA, "$(P)Enable.SEVR")
    field(INPB, "$(P)TablesErr.SEVR")
    field(INPC, "$(P)BufferSize.SEVR")
    field(CALC, "(A+B+C)=0")
    field(FLNK, "$(P)Status")
}
record(bi, "$(P)Status")
{
    field(DESC, "FlatField plugin status")
    field(ZNAM, "Not OK")
    field(ONAM, "OK")
    field(ZSV,  "MAJOR")
    field(INP,  "$(P)StatusCalc")
}
record(waveform, "$(P)ImportReport")
{
    field(ASG,  "BEAMLINE")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT))ImportReport")
    field(FTVL, "CHAR")
    field(NELM, "1024")
    field(PINI, "YES")
}
record(waveform, "$(P)ImportDir")
{
    field(ASG,  "BEAMLINE")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT))ImportDir")
    field(FTVL, "CHAR")
    field(NELM, "1024")
    field(PINI, "YES")
}
record(bi, "$(P)TablesErr")
{
    field(DESC, "One or more tables not imported")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT))TablesErr")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
    field(ZNAM, "no error")
    field(ONAM, "error")
    field(OSV,  "MAJOR")
    field(FLNK, "$(P)StatusCalc")
}
record(longin, "$(P)BufferSize")
{
    field(DESC, "Size of the transformation buffer")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT))BufferSize")
    field(PINI, "YES")
    field(LSV,  "MAJOR")
    field(LOW,  "0")
    field(EGU,  "bytes")
    field(FLNK, "$(P)StatusCalc")
}
record(bo, "$(P)PsEn")
{
    info(autosaveFields, "VAL")
    field(DESC, "Photosum elimination switch")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT))PsEn")
    field(PINI, "YES")
    field(ZNAM, "disabled")
    field(ONAM, "enabled")
    field(FLNK, "$(P)Positions_RB")
}
record(bo, "$(P)CorrEn")
{
    info(autosaveFields, "VAL")
    field(DESC, "Flat field correction switch")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT))CorrEn")
    field(PINI, "YES")
    field(ZNAM, "disabled")
    field(ONAM, "enabled")
    field(FLNK, "$(P)Positions_RB")
}
record(bo, "$(P)ConvEn")
{
    info(autosaveFields, "VAL")
    field(DESC, "Convert to pixel id switch")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT))ConvEn")
    field(PINI, "YES")
    field(ZNAM, "disabled")
    field(ONAM, "enabled")
}
record(waveform, "$(P)Positions")
{
    info(autosaveFields, "VAL")
    field(DESC, "Configured positions")
    field(DTYP, "asynInt8ArrayOut")
    field(INP,  "@asyn($(PORT))Positions")
    field(PINI, "YES")
    field(FTVL, "CHAR")
    field(NELM, "100")
    field(FLNK, "$(P)PositionsReport")
}
record(waveform, "$(P)Positions_RB")
{
    field(DESC, "Loaded positions")
    field(DTYP, "asynInt8ArrayIn")
    field(INP,  "@asyn($(PORT))Positions")
    field(PINI, "YES")
    field(FTVL, "CHAR")
    field(NELM, "100")
    field(FLNK, "$(P)Positions")
}
record(waveform, "$(P)PositionsReport")
{
    field(ASG,  "BEAMLINE")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT))PositionsReport")
    field(FTVL, "CHAR")
    field(NELM, "1024")
    field(PINI, "YES")
}

record(longin, "$(P)CntGoodEvents")
{
    field(DESC, "Number of processed events")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT))CntGoodEvents")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PINI, "YES")
}
record(longin, "$(P)CntVetoEvents")
{
    field(DESC, "Number of vetoed events")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT))CntVetoEvents")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PINI, "YES")
}
record(longin, "$(P)CntSplit")
{
    field(DESC, "Number of splits occurred")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT))CntSplit")
    field(SCAN, "I/O Intr")
    field(VAL,  "0")
    field(PINI, "YES")
}
record(bo, "$(P)ResetCnt")
{
    field(ASG,  "BEAMLINE")
    field(DESC, "Reset counters")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT))ResetCnt")
    field(ZNAM, "None")
    field(ONAM, "Reset")
}
record(longout, "$(P)XyFractWidth")
{
    info(autosaveFields, "VAL")
    field(ASG,  "BEAMLINE")
    field(DESC, "X,Y UQm.n fraction width")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT))XyFractWidth")
    field(PINI, "YES")
    field(HOPR, "30")
}
record(ao, "$(P)XMaxIn")
{
    info(autosaveFields, "VAL")
    field(ASG,  "BEAMLINE")
    field(DESC, "Max X value from detector")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT))XMaxIn")
    field(PINI, "YES")
    field(LOPR, "1")
    field(PREC, "2")
}
record(ao, "$(P)YMaxIn")
{
    info(autosaveFields, "VAL")
    field(ASG,  "BEAMLINE")
    field(DESC, "Max Y value from detector")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT))YMaxIn")
    field(PINI, "YES")
    field(LOPR, "1")
    field(PREC, "2")
}
record(longout, "$(P)XMaxOut")
{
    info(autosaveFields, "VAL")
    field(ASG,  "BEAMLINE")
    field(DESC, "Max X out value")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT))XMaxOut")
    field(PINI, "YES")
    field(LOPR, "1")
    field(HOPR, "1023")
}
record(longout, "$(P)YMaxOut")
{
    info(autosaveFields, "VAL")
    field(ASG,  "BEAMLINE")
    field(DESC, "Max Y out value")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT))YMaxOut")
    field(PINI, "YES")
    field(LOPR, "1")
    field(HOPR, "1023")
}
record(longout, "$(P)PsFractWidth")
{
    info(autosaveFields, "VAL")
    field(ASG,  "BEAMLINE")
    field(DESC, "Photo sum UQm.n fraction width")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT))PsFractWidth")
    field(PINI, "YES")
    field(HOPR, "30")
}
record(longin, "$(P)TablesSizeX")
{
    field(DESC, "All tables number of Xs")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT))TablesSizeX")
    field(PINI, "YES")
}
record(longin, "$(P)TablesSizeY")
{
    field(DESC, "All tables number of Ys")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT))TablesSizeY")
    field(PINI, "YES")
}
