record(mbbi, "$(P)Upg:Status")
{
    field(ASG,  "BEAMLINE")
    field(DESC, "Remote upgrade status")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT))Upg:Status")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
    field(ZRVL, "0")
    field(ZRST, "Not supported")
    field(ONVL, "1")
    field(ONST, "Not ready")
    field(TWVL, "2")
    field(TWST, "File loaded")
    field(THVL, "3")
    field(THST, "Erasing")
    field(FRVL, "4")
    field(FRST, "In progress")
    field(FVVL, "5")
    field(FVST, "Waiting")
    field(SXVL, "6")
    field(SXST, "Finalizing")
    field(SVVL, "7")
    field(SVST, "Done")
    field(EIVL, "8")
    field(EIST, "Error")
    field(NIVL, "9")
    field(NIST, "User aborted")
    field(FLNK, "$(P)Upg:ErrorStr")
}
record(waveform, "$(P)Upg:ErrorStr")
{
    field(ASG,  "BEAMLINE")
    field(DESC, "Error description")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT))Upg:ErrorStr")
    field(FTVL, "CHAR")
    field(NELM, "64")
}
record(calc, "$(P)Upg:RunTime")
{
    field(INPA, "$(P)Upg:Status NPP")
    field(INPB, "$(P)Upg:RunTime NPP")
    field(CALC, "A>2&&A<8?B+1:B")
    field(SCAN, "1 second")
    field(EGU,  "s")
}
record(longin, "$(P)Upg:Size")
{
    field(ASG,  "BEAMLINE")
    field(DESC, "Total firmware size in bytes")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT))Upg:Size")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
    field(EGU,  "B")
    field(FLNK, "$(P)Upg:Progress")
}
record(longin, "$(P)Upg:Position")
{
    field(ASG,  "BEAMLINE")
    field(DESC, "Bytes sent to remote party")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT))Upg:Position")
    field(SCAN, "I/O Intr")
    field(PINI, "YES")
    field(EGU,  "B")
    field(FLNK, "$(P)Upg:Progress")
}
record(calc, "$(P)Upg:Progress")
{
    info(autosaveFields, "VAL")
    info(asyn:READBACK, "1")
    field(ASG,  "BEAMLINE")
    field(INPA, "$(P)Upg:Size NPP")
    field(INPB, "$(P)Upg:Position NPP")
    field(CALC, "B/A")
    field(EGU,  "%")
}
record(longout, "$(P)Upg:ChunkSize")
{
    info(autosaveFields, "VAL")
    info(asyn:READBACK, "1")
    field(ASG,  "BEAMLINE")
    field(DESC, "Number of bytes per packet")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT))Upg:ChunkSize")
    field(EGU,  "B")
    field(ASG,  "BEAMLINE")
}
record(longin, "$(P)Upg:ChunkSizeRBV")
{
    field(ASG,  "BEAMLINE")
    field(DESC, "Number of bytes per packet")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT))Upg:ChunkSize")
    field(SCAN, "I/O Intr")
    field(EGU,  "B")
    field(ASG,  "BEAMLINE")
}
record(waveform, "$(P)Upg:File")
{
    field(ASG,  "BEAMLINE")
    field(DESC, "New firmware file to be programed")
    field(DTYP, "asynOctetWrite")
    field(INP,  "@asyn($(PORT))Upg:File")
    field(FTVL, "CHAR")
    field(NELM, "1024")
}
record(mbbo, "$(P)Upg:Cmd")
{
    field(ASG,  "BEAMLINE")
    field(DESC, "Remote upgrade command")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT))Upg:Cmd")
    field(ZRVL, "0")
    field(ZRST, "Abort")
    field(ONVL, "1")
    field(ONST, "Start")
    field(TWVL, "2")
    field(TWST, "Check")
    field(FLNK, "$(P)Upg:OnStart")
}
# When Start command is detected, reset the RunTime PV to 0
record(calcout, "$(P)Upg:OnStart")
{
    field(INPA, "$(P)Upg:Cmd NPP")
    field(INPB, "$(P)Upg:RunTime NPP")
    field(CALC, "A=1?0:B")
    field(OUT,  "$(P)Upg:RunTime NPP")
}
record(ao, "$(P)Upg:EraseTimeout")
{
    info(autosaveFields, "VAL")
    field(ASG,  "BEAMLINE")
    field(DESC, "Max time to wait for erased flag")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT))Upg:EraseTimeout")
    field(EGU,  "s")
    field(PINI, "YES")
}
record(ao, "$(P)Upg:BusyTimeout")
{
    info(autosaveFields, "VAL")
    field(ASG,  "BEAMLINE")
    field(DESC, "Max time to wait for ready flag")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT))Upg:BusyTimeout")
    field(EGU,  "s")
    field(PINI, "YES")
}
record(ao, "$(P)Upg:ProgramTimeout")
{
    info(autosaveFields, "VAL")
    field(ASG,  "BEAMLINE")
    field(DESC, "Max time to wait for programmed flag")
    field(DTYP, "asynFloat64")
    field(OUT,  "@asyn($(PORT))Upg:ProgramTimeout")
    field(EGU,  "s")
    field(PINI, "YES")
}
